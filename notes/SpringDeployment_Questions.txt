*   How to deploy Spring Boot Application without any CI/CD pipeline or Docker/Kubernetes ?

>>  (1) Stop Existing Application (if running):

        - If the Spring Boot app is already running on Windows then open Command Prompt and run (if running from a .jar):

            ```
                wmic process where "CommandLine like '%app.jar%'" call terminate
            ```
        
        - This will stop the Java process running the JAR.

    (2) Install Java JDK and Configure JAVA_HOME:

        (a) Download JDK:
            
            - Go to https://adoptium.net or Oracle's site
            
            - Download JDK 11, 17, or 21 (whichever your app needs)
            
            - Install it (e.g., to C:\Program Files\Eclipse Adoptium\jdk-17)

        (b) Set Environment Variables:

            - Open System Properties → Environment Variables
            
            - Under System Variables, click New and add:

                ```
                    Name: JAVA_HOME
                    Value: C:\Program Files\Eclipse Adoptium\jdk-17 (or your JDK path)
                ```

            - Edit the Path variable → click New and add:

                ```
                    %JAVA_HOME%\bin
                ```

        (c) Verify:

            - Open Command Prompt and run:

                ```
                    java -version
                ```

            - You should see the installed Java version.

    (3) Build the JAR File from Project:

        - On your development machine, run below maven cmd to build jar:

            ``` 
                mvn clean package
            ```

        - This will generate a file like:

            ```
                target/myapp.jar
            ```

    (4) Place the JAR in the Windows Server:

        (a) Using Shared Network Folder:

            - Just copy-paste the .jar file to a folder on your Windows server (e.g., C:\apps\myapp.jar)

        (b) Using File Transfer (WinSCP / USB / etc.):

            - Manually copy using any file transfer tool

    (5) Run the Spring Boot App:

        - Open Command Prompt (as Administrator) and navigate to the app folder and run below cmd:

            ```
                java -jar myapp.jar
            ```

        - The app will start.

    (6) (Optional) Run in Background / As a Service:

        - Use start to run in a new window:

            ```    
                start java -jar myapp.jar
            ```

________________________________________________________________________________________________________________________

*   How to deploy Spring Boot Application using GitHub Action ?

>>  (1) Triggers a GitHub Actions workflow:
        
        - GitHub Actions can be configured in two ways for deployment:

            (a) Deploy on every push (default behavior)
            (b) On manually trigger the action from GitHub UI

        - This triggers a GitHub actions workflow (defined in .github/workflows/deploy.yml).

    (2) GitHub Actions Workflow Starts Automatically:

        - GitHub Actions starts a virtual machine (e.g., Ubuntu runner) and executes the steps you've defined.

    (3) GitHub Actions Steps (Pipeline Execution):
    
        (a) Checkout Your Code:

            - GitHub Action clones your code from the repository into the runner (temporary server).

        (b) Set Up Java Environment:

            - It installs JDK (like Java 17) to compile the Spring Boot app.

        (c) Build the Project and Run Unit Tests
            
            - It runs 'mvn clean verify'
            
            - This runs all unit tests.

            - If any test fails, the workflow stops immediately and deployment is aborted.

            - If all tests pass, the app is packaged into a .jar file under target/.

        (d) Copy the JAR to Your Server:

            - Using SSH + SCP, it copies the .jar file to your remote server (e.g., a Linux VM on AWS).

        (e) Stop the Old App and Start the New One:

            - It SSHs into your server and runs commands:

                ```
                    pkill -f 'java -jar'    # stops the old app
                    nohup java -jar app.jar > app.log 2>&1 &   # starts the new app in background
                ```

    (4) Deployment Complete:

        - Your updated Spring Boot app is now running on the server, accessible at:

            ```
                http://<your-server-ip>:8080/
            ```

________________________________________________________________________________________________________________________

*   Give example of Github workflow action yaml file.

>>  ```
        # Name of the workflow as it appears in GitHub Actions UI
        name: Build, Test, and Deploy Spring Boot App

        # Defines when the workflow should run
        on:
        push:                    # Trigger workflow when code is pushed
            branches:
            - main               # Only run when changes are pushed to 'main' branch
        workflow_dispatch:       # Also allow manual trigger from GitHub UI

        jobs:
        build-and-deploy:
            runs-on: ubuntu-latest     # Use latest Ubuntu VM as the runner

            steps:

            # Step 1: Checkout the source code from the repository
            - name: Checkout repository
                uses: actions/checkout@v3

            # Step 2: Set up Java environment
            - name: Set up JDK 17
                uses: actions/setup-java@v3
                with:
                java-version: '17'       # Java version to use
                distribution: 'temurin'  # JDK distribution

            # Step 3: Build the project and run unit tests
            - name: Build and run tests using Maven
                run: mvn clean verify      # Runs unit tests and builds JAR (fails if any test fails)

            # Step 4: Upload the JAR to the remote server using SCP
            - name: Copy JAR to remote server
                uses: appleboy/scp-action@v0.1.4
                with:
                host: ${{ secrets.SERVER_HOST }}       # Server IP or hostname
                username: ${{ secrets.SERVER_USER }}   # SSH username
                key: ${{ secrets.DEPLOY_KEY }}         # SSH private key stored as GitHub Secret
                port: 22                               # SSH port
                source: "target/*.jar"                 # Source JAR to send
                target: "/home/${{ secrets.SERVER_USER }}/app"  # Destination directory on server

            # Step 5: SSH into the server to restart the application
            - name: Restart Spring Boot app on server
                uses: appleboy/ssh-action@v1.0.0
                with:
                host: ${{ secrets.SERVER_HOST }}        # Server IP
                username: ${{ secrets.SERVER_USER }}    # SSH username
                key: ${{ secrets.DEPLOY_KEY }}          # SSH private key
                port: 22                                # SSH port
                script: |
                    # Kill any existing Java process running the app
                    pkill -f 'java -jar' || true

                    # Run the new JAR in the background and redirect logs
                    nohup java -jar /home/${{ secrets.SERVER_USER }}/app/*.jar > /home/${{ secrets.SERVER_USER }}/app/app.log 2>&1 &
    ```

________________________________________________________________________________________________________________________

*   Explain end-to-end flow of how a feature is developed and then deployed using JIRA, GitHub, Junit etc.

>>  Feature-to-Prod deployment flow with tests on PR and deploy on merge:

    - Git branching structure:

        ```
            main                   → Production-ready code
            └── development        → Active development branch
                 └── feature/*     → Feature branches
        ```
    - Step-by-Step flow:

        (1) Feature Development (Local Dev Environment):
            
            (a) Create Feature Branch:

                ```
                    git checkout -b feature/PROJ-123-add-login develop
                ```

            (b) Develop feature and test locally

            (c) Push code & create PR to merge feature into 'development' branch 

            (d) GitHub Action triggered on PR:

                - Runs unit tests and build (JUnit)

                - (No deploy yet)

            (e) Code is reviewed and approved

            (f) Merge PR into 'development' branch 

            (g) GitHub Action triggered on merge to 'development' branch:

                - Runs build

                - Deploys .jar to Dev server

            (h) Developer does basic testing on Dev environment

        (2) Promote to Staging (After Dev Testing):
            
            If feature works fine on Dev:

            (a) Create PR from 'development' branch to 'main' branch

            (b) GitHub Action triggered on PR:

                - Runs unit tests and build again

                - (No deploy yet)

            (c) PR is reviewed and approved

            (d) Merge PR into 'main' branch

            (e) GitHub Action triggered on merge to 'main' branch:

                - Runs build

                - Deploys .jar to Staging server

            (f) QA/UAT team tests feature on Staging
        
        (3) Deploy to Production (Manual Approval or Tag):

            - After QA/UAT sign-off on Staging:

            (a) Someone manually triggers deployment to Production via GitHub Actions UI or Push a version release tag 
                to main (e.g., v1.0.0)

            (b) GitHub Action triggered manually or by tag:

                - Deploys .jar to Production server

________________________________________________________________________________________________________________________

*   Explain Blue-Green deployment strategy in detail.

>>  Blue-Green Deployment is a zero-downtime deployment strategy where two identical environments (called Blue and Green) 
    are maintained. 
    
    At any time, only one environment (say Blue) is live and serves traffic. The other (Green) holds the new version of 
    the application. 
    
    Once the new version is fully tested in Green, the traffic is switched from Blue to Green where Blue remains idle.

    How It Works:

        (1) Blue Environment (Current Production):

            - The stable version that is currently serving users.

        (2) Green Environment (Staging/Next Release):

            - A replica of the Blue environment.

            - The new version of the application is deployed here.

        (3) Traffic Switch:

            - After validating the Green version, a router/load balancer/DNS switch is used to reroute traffic from Blue to Green.

        (4) Post-Switch:

            - Blue is now idle and can serve as a rollback target if anything goes wrong with Green.

    Benefits:

        (1) Zero Downtime: No user-facing downtime during deployment.

        (2) Easy Rollback: Revert instantly by switching back to Blue.

        (3) Production-Like Testing: Green can be tested under real-world conditions before exposure.

        (4) Seamless Release: Users won't notice the transition if done properly.

    Drawbacks:

        (1) Double Resource Usage: Need two environments running in parallel.

        (2) Infrastructure Complexity: Managing sync between environments can be tricky.

        (3) Stateful Services: Difficult if databases need to be kept in sync.

    Example:

        (1) Initial Setup:
            
            - You have two identical environments:

                - Blue (currently live production)
                - Green (idle, staging or standby)

        (2) Release v1.0 (Initial release):

            - Code version: v1.0
            - Deployed to: Blue
            - Green is idle or has older/no code.
            - All user traffic goes to Blue.

        (3) Release v1.1
            
            - You deploy version v1.1 to Green.
            - Test it in Green (no production traffic yet).
            - Once testing passes, switch production traffic to Green.

            Now:
                
                - Green is live with v1.1
                - Blue is idle, still has v1.0 (can be rolled back to if needed)

        (4) Release 1.2
            
            - Now reuse Blue (since it’s idle).
            - Deploy v1.2 to Blue.
            - Run automated tests, QA validation, etc.
            - Once verified, switch traffic back to Blue.
            
            Now:
            
                - Blue is live with v1.2
                - Green is idle with v1.1

________________________________________________________________________________________________________________________

*   How to setup GitHub actions for CI/CD of Spring Boot Application ?

>>

________________________________________________________________________________________________________________________